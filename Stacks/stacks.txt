Stacks
Friday December 22, 2017

- A Stack is an ADT (abstract data type) that keeps track of the most recently used items, it can be implemented in many
ways, but is commonly implemented as an array
- A Stack is a LIFO data type, where the last item in is the first item out 
- When you're thinking of a stack, think a stack of plates
	- How do you get to the 3rd plate in the stack (you remove all the ones on top first, and then
	get to it)
		
- Methods 
	- pop(): O(1), removes and returns the element on the top of the stack
	- push(x): O(1), adds x to the top of the stack
	- peek(), O(1), returns what item is on the top of the stack
	- size(), O(1), returns the size of the array 
	- search(x), O(n) searches for x in the stack 
	
- Example:
	- The stack will be represented as an array where array[0] is the bottom of the Stack and 
	array[len(array) - 1] is the top of the Stack
	
	s = Stack()
	s.push(1)
	s.push(2)
	s.push(-3)
	s.push(42)
						    top
							 | 
	print(s) --> [1, 2, -3, 42]
	
	print(s.pop()) --> 42
	print(s) --> [1, 2, -3]
	print(s.pop()) --> -3
	print(s.peek()) --> 2
	print(s) --> [1, 2]
	print(s.size()) --> 2
	print(s.search(-99)) --> False
	print(s.search(-3)) --> False 
	print(s.search(2)) --> True
	
- Applications
	- A Stack is most commonly seen in computer memory, the memory stack. It stores local data and 
	call information about the function calls and the current state of the program
	- A Stack is also commonly used to 'backtrack' or 'undo' operations
		- E.g. When you press undo on a keyboard
			- The stack stores every word you type (the most recent word you type is on the top of
			the stack), when you press undo, the most recent word is popped off the stack
	- Used in the Depth-First-Search algorithm for searching/traversing graphs